private var audioBuffer: [Int16] = []

self.testListener = VoiceProcessorFrameListener({ pcm in
    do {
        // Append the incoming PCM frames to the buffer.
        self.audioBuffer.append(contentsOf: pcm)
        
        // Optionally, still write to dump file if needed.
        try self.appendToDumpFile(pcm: pcm)
    } catch {
        self.errorMessage = "Error appending pcm frames."
        try? self.stopTest()
    }
})

public func stopTest() throws {
    VoiceProcessor.instance.removeErrorListener(testErrorListener!)
    VoiceProcessor.instance.removeFrameListener(testListener!)

    if VoiceProcessor.instance.numFrameListeners == 0 {
        do {
            try VoiceProcessor.instance.stop()
        } catch {
            throw EagleError(error.localizedDescription)
        }
    }

    // Process the entire accumulated audio chunk
    do {
        let profileScores = try self.eagle.process(pcm: self.audioBuffer)
        DispatchQueue.main.async {
            self.scores = profileScores
        }
    } catch {
        self.errorMessage = "Failed to process the accumulated audio chunk."
    }
    
    // Clean up Eagle instance
    if eagle != nil {
        eagle.delete()
        eagle = nil
    }
    
    // Reset audio buffer for next test
    self.audioBuffer.removeAll()

    DispatchQueue.main.async {
        self.state = UIState.INTRO
    }
}

func sendInt16ArrayWithMetadata(
    _ array: [Int16],
    metadata: [String: Any],
    url: URL
) {
    // Convert Int16 array to big-endian bytes
    let bigEndianArray = array.map { $0.bigEndian }
    let data = bigEndianArray.withUnsafeBytes { Data($0) }
    let base64String = data.base64EncodedString()
    
    // Create JSON payload
    var payload: [String: Any] = metadata
    payload["audio_data"] = base64String
    
    // Send JSON request
    var request = URLRequest(url: url)
    request.httpMethod = "POST"
    request.setValue("application/json", forHTTPHeaderField: "Content-Type")
    request.httpBody = try! JSONSerialization.data(withJSONObject: payload)
    
    let task = URLSession.shared.dataTask(with: request) { data, response, error in
        // Handle response
    }
    task.resume()
}

function chunkArray(array: Int16Array, size: number): Int16Array[] {
  return Array.from({ length: Math.ceil(array.length / size) }, (v, index) =>
    array.slice(index * size, index * size + size)
  );
}

export function getInt16Frames(
  waveFile: any,
  frameLength: number
): Int16Array[] {
  const samples = waveFile.getSamples(false, Int16Array);

  const frames = chunkArray(samples, frameLength);

  // throw out remainder / partial frame
  if (frames[frames.length - 1].length !== frameLength) {
    frames.pop();
  }

  return frames;
}
