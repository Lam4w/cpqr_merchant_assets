import SwiftUI

struct TypingAnimationView: View {
    let textToType: String
    @State private var animatedText: String
    private let main: DispatchQueue
    // ScrollView reference for scrolling
    @State private var scrollViewProxy: ScrollViewProxy? = nil
    // ID for the text view to scroll to
    private let bottomID = "bottomID"
    
    init(textToType: String) {
        self.textToType = textToType
        self.animatedText = String(repeating: " ", count: textToType.count)
        self.main = DispatchQueue.main
    }
    
    var body: some View {
        VStack {
            ScrollViewReader { proxy in
                ScrollView {
                    Text(animatedText)
                        .font(.title)
                        .frame(maxWidth: .infinity, alignment: .leading)
                        .padding()
                        .id(bottomID) // Set ID for scrolling target
                }
                .frame(height: 200) // Fixed height for the ScrollView
                .onAppear {
                    scrollViewProxy = proxy
                    animateText()
                }
            }
        }
    }
    
    func animateText() {
        for (index, character) in textToType.enumerated() {
            main.asyncAfter(deadline: .now() + Double(index) * 0.2) {
                let sindex = animatedText.index(animatedText.startIndex, offsetBy: index)
                animatedText.remove(at: sindex)
                animatedText.insert(character, at: sindex)
                UIImpactFeedbackGenerator(style: .light).impactOccurred()
                
                // Scroll to bottom after each character
                withAnimation {
                    scrollViewProxy?.scrollTo(bottomID, anchor: .bottom)
                }
                
                if index == textToType.count - 1 {
                    main.asyncAfter(deadline: .now() + 0.8) {
                        retractText()
                    }
                }
            }
        }
    }
    
    func retractText() {
        for (index, _) in textToType.enumerated() {
            let time = index == textToType.count - 1 ? 0.218 : 0.2
            main.asyncAfter(deadline: .now() + Double(index) * time) {
                let sindex = animatedText.index(animatedText.startIndex, offsetBy: textToType.count - 1 - index)
                animatedText.remove(at: sindex)
                animatedText.insert(contentsOf: " ", at: sindex)
                UIImpactFeedbackGenerator(style: .light).impactOccurred()
                
                // Scroll to bottom after each character removal
                withAnimation {
                    scrollViewProxy?.scrollTo(bottomID, anchor: .bottom)
                }
                
                // Check if it's the last character
                if index == textToType.count - 1 {
                    // If it's the last character, restart the typing animation
                    main.asyncAfter(deadline: .now() + 0.8) {
                        animateText()
                    }
                }
            }
        }
    }
}

// Preview
struct TypingAnimationView_Previews: PreviewProvider {
    static var previews: some View {
        TypingAnimationView(textToType: "Hello, this is a typing animation example with automatic scrolling as the text is being typed.")
    }
}
