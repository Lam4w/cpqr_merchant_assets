private var audioBuffer: [Int16] = []

self.testListener = VoiceProcessorFrameListener({ pcm in
    do {
        // Append the incoming PCM frames to the buffer.
        self.audioBuffer.append(contentsOf: pcm)
        
        // Optionally, still write to dump file if needed.
        try self.appendToDumpFile(pcm: pcm)
    } catch {
        self.errorMessage = "Error appending pcm frames."
        try? self.stopTest()
    }
})

public func stopTest() throws {
    VoiceProcessor.instance.removeErrorListener(testErrorListener!)
    VoiceProcessor.instance.removeFrameListener(testListener!)

    if VoiceProcessor.instance.numFrameListeners == 0 {
        do {
            try VoiceProcessor.instance.stop()
        } catch {
            throw EagleError(error.localizedDescription)
        }
    }

    // Process the entire accumulated audio chunk
    do {
        let profileScores = try self.eagle.process(pcm: self.audioBuffer)
        DispatchQueue.main.async {
            self.scores = profileScores
        }
    } catch {
        self.errorMessage = "Failed to process the accumulated audio chunk."
    }
    
    // Clean up Eagle instance
    if eagle != nil {
        eagle.delete()
        eagle = nil
    }
    
    // Reset audio buffer for next test
    self.audioBuffer.removeAll()

    DispatchQueue.main.async {
        self.state = UIState.INTRO
    }
}



